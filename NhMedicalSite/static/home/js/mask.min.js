function MaskedPassword(a, b) {
	if ("undefined" == typeof document.getElementById || "undefined" == typeof document.styleSheets) {
		return !1
	}
	if (null == a) {
		return !1
	}
	this.symbol = b, this.isIE = "undefined" != typeof document.uniqueID, a.value = "", a.defaultValue = "", a._contextwrapper = this.createContextWrapper(a), this.fullmask = !1;
	var c = a._contextwrapper;
	var d = '<input type="hidden" id="' + a.id + '" name="' + a.name + '">',
		e = this.convertPasswordFieldHTML(a);
	c.innerHTML = d + e, a = c.lastChild, a.className += " masked", a.setAttribute("autocomplete", "off"), a._realfield = c.firstChild, a._contextwrapper = c, this.limitCaretPosition(a);
	var f = this;
	return this.addListener(a, "change", function (a) {
		f.fullmask = !1, f.doPasswordMasking(f.getTarget(a))
	}), this.addListener(a, "input", function (a) {
		f.fullmask = !1, f.doPasswordMasking(f.getTarget(a))
	}), this.addListener(a, "propertychange", function (a) {
		f.doPasswordMasking(f.getTarget(a))
	}), this.addListener(a, "keyup", function (a) {
		/^(9|1[678]|224|3[789]|40)$/.test(a.keyCode.toString()) || (f.fullmask = !1, f.doPasswordMasking(f.getTarget(a)))
	}), this.addListener(a, "blur", function (a) {
		f.fullmask = !0, f.doPasswordMasking(f.getTarget(a))
	}), this.forceFormReset(a), !0
}
MaskedPassword.prototype = {
	doPasswordMasking: function (a) {
		var b = "";
		if ("" != a._realfield.value) {
			for (var c = 0; c < a.value.length; c++) {
				b += a.value.charAt(c) == this.symbol ? a._realfield.value.charAt(c) : a.value.charAt(c)
			}
		} else {
			b = a.value
		}
		var d = this.encodeMaskedPassword(b, this.fullmask, a);
		a._realfield.value == b && a.value == d || (a._realfield.value = b, a.value = d)
	},
	encodeMaskedPassword: function (a, b, c) {
		for (var d = b === !0 ? 0 : 1, e = "", f = 0; f < a.length; f++) {
			e += f < a.length - d ? this.symbol : a.charAt(f)
		}
		return e
	},
	createContextWrapper: function (a) {
		var b = document.createElement("span");
		return b.style.position = "relative", a.parentNode.insertBefore(b, a), b.appendChild(a), b
	},
	forceFormReset: function (a) {
		for (; a && !/form/i.test(a.nodeName);) {
			a = a.parentNode
		}
		return /form/i.test(a.nodeName) ? (this.addSpecialLoadListener(function () {
			a.reset()
		}), a) : null
	},
	convertPasswordFieldHTML: function (a, b) {
		a.id = "";
		for (var c = "<input", d = a.attributes, e = 0; e < d.length; e++) {
			d[e].specified && !/^(_|type|name)/.test(d[e].name) && (c += " " + d[e].name + '="' + d[e].value + '"')
		}
		return c += ' type="text" autocomplete="off">'
	},
	limitCaretPosition: function (a) {
		var b = null,
			c = function () {
				null == b && (b = this.isIE ? window.setInterval(function () {
					var b = a.createTextRange(),
						c = a.value.length,
						d = "character";
					b.moveEnd(d, c), b.moveStart(d, c), b.select()
				}, 100) : window.setInterval(function () {
					var b = a.value.length;
					a.selectionEnd == b && a.selectionStart <= b || (a.selectionStart = b, a.selectionEnd = b)
				}, 100))
			},
			d = function () {
				window.clearInterval(b), b = null
			};
		this.addListener(a, "focus", function () {
			c()
		}), this.addListener(a, "blur", function () {
			d()
		})
	},
	addListener: function (a, b, c) {
		return "undefined" != typeof document.addEventListener ? a.addEventListener(b, c, !1) : "undefined" != typeof document.attachEvent ? a.attachEvent("on" + b, c) : void 0
	},
	addSpecialLoadListener: function (a) {
		return (this.isIE && typeof document.attachEvent != "undefined") ? window.attachEvent("onload", a) : document.addEventListener("DOMContentLoaded", a, !1)
	},
	getTarget: function (a) {
		return a ? a.target ? a.target : a.srcElement : null
	}
}, jQuery(document).ready(function () {
	jQuery("input[data-type=mask]").each(function () {
		new MaskedPassword(this, "\u25CF")
	})
});